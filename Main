local FoundIslands = {}

local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local File = pcall(function()
	AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
	table.insert(AllIDs, actualHour)
	writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end
function TPReturner()
	local Site;
	if foundAnything == "" then
		Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
	else
		Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
	end
	local ID = ""
	if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
		foundAnything = Site.nextPageCursor
	end
	local num = 0;
	for i,v in pairs(Site.data) do
		local Possible = true
		ID = tostring(v.id)
		if tonumber(v.maxPlayers) > tonumber(v.playing) then
			for _,Existing in pairs(AllIDs) do
				if num ~= 0 then
					if ID == tostring(Existing) then
						Possible = false
					end
				else
					if tonumber(actualHour) ~= tonumber(Existing) then
						local delFile = pcall(function()
							delfile("NotSameServers.json")
							AllIDs = {}
							table.insert(AllIDs, actualHour)
						end)
					end
				end
				num = num + 1
			end
			if Possible == true then
				table.insert(AllIDs, ID)
				wait()
				pcall(function()
					writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
					wait()
					game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
				end)
				wait(4)
			end
		end
	end
end

function ServerHop()
	while wait() do
		pcall(function()
			TPReturner()
			if foundAnything ~= "" then
				TPReturner()
			end
		end)
	end
end


----------

function SendMessage(url, message)
	local http = game:GetService("HttpService")
	local headers = {
		["Content-Type"] = "application/json"
	}
	local data = {
		["content"] = message
	}
	local body = http:JSONEncode(data)
	local response = request({
		Url = url,
		Method = "POST",
		Headers = headers,
		Body = body
	})
end

function SendMessageEMBED(url, embed)
	local http = game:GetService("HttpService")
	local headers = {
		["Content-Type"] = "application/json"
	}
	local data = {
		["embeds"] = {
			{
				["title"] = embed.title,
				["description"] = embed.description,
				["color"] = embed.color,
				["fields"] = embed.fields,
				["footer"] = {
					["text"] = embed.footer.text
				}
			}
		}
	}
	local body = http:JSONEncode(data)
	local response = request({
		Url = url,
		Method = "POST",
		Headers = headers,
		Body = body
	})
	print("Sent")
end

local url = "https://discord.com/api/webhooks/1362179485138686032/_WkAElqFAcSC29tyl5ZyCommJp9qp0IdVXfTPaBfVVz-r_kJt6LKVPUiFrXgYUDtvSLG"

----------

for _, Island in workspace.Rendered.Rifts:GetChildren() do
	if Island.Display.SurfaceGui:FindFirstChild("Icon") then
		table.insert(FoundIslands, tostring(Island.Name .. " (" .. Island.Display.SurfaceGui.Icon.Luck.Text .. ")"))

		if Island.Name == "aura-egg" then
			SendMessage(url, "**‚ùó AURA EGG FOUND ‚ùó** - USER:  @" .. tostring(game.Players.LocalPlayer.Name) .. "  - @everyone")

			task.wait(200)
		end
	end
end

task.wait(0.1)

local LF_EGG = "void-egg (x25)"

local Embed = {
	["title"] = "üîé Eggs Found: ",
	["description"] = tostring(table.concat(FoundIslands, "\n ")),
	["fields"] = {
		{
			["name"] = "Searching For:",
			["value"] = "void-egg (x25)",
		},
	},
	["color"] = 16777215,
	["footer"] = {
		["text"] = tostring(os.date("%H:%M:%S"))
	}
}

---

SendMessageEMBED(url, Embed)

warn("x1")
warn(FoundIslands)

task.wait(0.5)

if table.find(FoundIslands, LF_EGG) then

	for _, FoundEgg in workspace.Rendered.Rifts:GetChildren() do
		if FoundEgg.Display.SurfaceGui:FindFirstChild("Icon") then
			local LFstring = tostring(FoundEgg.Name .. " (" .. FoundEgg.Display.SurfaceGui.Icon.Luck.Text .. ")")

			if LFstring == LF_EGG then
				warn("Found!")

				local LuckMulti = FoundEgg.Display.SurfaceGui.Icon.Luck.Text
				local Timer = FoundEgg.Display.SurfaceGui.Timer.Text
				local Height = FoundEgg.Display.CFrame.Y

				local Embed_FOUND = {
					["title"] = "üîé EGG HAS BEEN FOUND!",
					["description"] = LF_EGG .. " has been found!",
					["fields"] = {
						{
							["name"] = "Egg",
							["value"] = tostring(FoundEgg.Name),
						},
						{
							["name"] = "Luck Multiplier",
							["value"] = tostring(LuckMulti),
						},
						{
							["name"] = "Time Left",
							["value"] = tostring(Timer),
						},
						{
							["name"] = "Estimated Height",
							["value"] = tonumber(math.floor(Height)),
						},
						{
							["name"] = "Account Username",
							["value"] = "@" .. tostring(game.Players.LocalPlayer.Name) .. " - AUTO-LEAVING IN 45 SECCONDS!",
						},
					},
					["color"] = 5763719,
					["footer"] = {
						["text"] = tostring(os.date("%H:%M:%S"))
					}
				}

				SendMessage(url, "**‚ú® EGG FOUND** - @everyone")
				SendMessageEMBED(url, Embed_FOUND)

			end
		end
	end

else
	SendMessage(url, "*Changing servers...*")
	ServerHop()
end
